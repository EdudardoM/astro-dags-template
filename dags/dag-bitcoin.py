"""
bitcoin_etl
DAG auto-generated by Astro Cloud IDE.
"""
# dags/bitcoin_etl.py
from __future__ import annotations

from airflow.decorators import dag, task
from airflow.operators.python import get_current_context
from datetime import timedelta
import pendulum
import requests
import pandas as pd


DEFAULT_ARGS = {
    "email_on_failure": True,
    "owner": "Alex Lopes,Open in Cloud IDE",
}


@task
def fetch_bitcoin_history():
    # Em Airflow 3.0, use a janela de dados da execução
    ctx = get_current_context()

    # Janela alvo: "ontem" = a janela imediatamente anterior à atual
    end_time = ctx["data_interval_start"]          # início da janela atual (meia-noite)
    start_time = end_time - timedelta(days=1)      # início da janela anterior

    print(f"Janela-alvo (UTC): {start_time} -> {end_time}")

    # Converta para epoch ms (UTC)
    start_ms = int(start_time.timestamp() * 1000)
    end_ms = int(end_time.timestamp() * 1000)

    # CoinCap hourly history
    url = "https://api.coincap.io/v2/assets/bitcoin/history"
    params = {"interval": "h1", "start": start_ms, "end": end_ms}

    r = requests.get(url, params=params, timeout=30)
    r.raise_for_status()
    payload = r.json()

    data = payload.get("data", [])
    if not data:
        print("Sem dados para a janela especificada.")
        return

    df = pd.DataFrame(data)
    # A coluna 'time' vem em ms UTC
    df["time"] = pd.to_datetime(df["time"], unit="ms", utc=True)
    df.set_index("time", inplace=True)

    # Mostra um preview no log
    print(df.head(5).to_string())

    # TODO: salvar no warehouse, ex. via PostgresHook / to_sql
    # from airflow.providers.postgres.hooks.postgres import PostgresHook
    # hook = PostgresHook(postgres_conn_id="postgres")
    # engine = hook.get_sqlalchemy_engine()
    # df.to_sql("bitcoin_history", con=engine, if_exists="append", index=True)


@dag(
    default_args=DEFAULT_ARGS,
    schedule="0 0 * * *",  # roda diariamente à 00:00 UTC
    start_date=pendulum.datetime(2025, 9, 17, tz="UTC"),
    catchup=True,
    owner_links={
        "Alex Lopes": "mailto:alexlopespereira@gmail.com",
        "Open in Cloud IDE": "https://cloud.astronomer.io/cm3webulw15k701npm2uhu77t/cloud-ide/cm42rbvn10lqk01nlco70l0b8/cm44gkosq0tof01mxajutk86g",
    },
    tags=["bitcoin", "etl", "example"],
)
def bitcoin_etl():
    fetch_bitcoin_history()


# Qualquer nome global funciona; Airflow vai descobrir este DAG
dag = bitcoin_etl()

